/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VaultFactory, VaultFactoryInterface } from "../VaultFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_impl",
        type: "address",
      },
    ],
    name: "NewStrat",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_impl",
        type: "address",
      },
    ],
    name: "NewVault",
    type: "event",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vKey",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "createVault",
    outputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "keys",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "sImpl",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_impl",
        type: "address",
      },
    ],
    name: "setSImpl",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
    ],
    name: "setUnderlying",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_impl",
        type: "address",
      },
    ],
    name: "setVImpl",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "vImpl",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "vaults",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600580546001600160a01b03191633179055610724806100326000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063ca22a6e111610066578063ca22a6e114610127578063cca23bf214610150578063e2a356a514610179578063e5c16bc51461018c578063f851a4401461019f57600080fd5b80630cb6aaf11461009857806329d263cc146100be5780633977775c146100d357806386ffe4ee146100fe575b600080fd5b6100ab6100a6366004610540565b6101b2565b6040519081526020015b60405180910390f35b6100d16100cc366004610583565b6101d3565b005b6100e66100e13660046105be565b610225565b6040516001600160a01b0390911681526020016100b5565b6100e661010c366004610540565b6001602052600090815260409020546001600160a01b031681565b6100e6610135366004610540565b6000602081905290815260409020546001600160a01b031681565b6100e661015e366004610540565b6004602052600090815260409020546001600160a01b031681565b6100d1610187366004610558565b61030f565b6100d161019a366004610558565b61038b565b6005546100e6906001600160a01b031681565b600381815481106101c257600080fd5b600091825260209091200154905081565b6005546001600160a01b031633146101ea57600080fd5b60009283526002602090815260408085206001600160a01b0394851686529091529092208054919092166001600160a01b0319909116179055565b600085815260208190526040812054610246906001600160a01b0316610401565b604051636c9980e160e01b81529091506001600160a01b03821690636c9980e19061027c9087908790879060009060040161068e565b600060405180830381600087803b15801561029657600080fd5b505af11580156102aa573d6000803e3d6000fd5b505060038054600181019091557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01879055505060009485526004602052604090942080546001600160a01b0319166001600160a01b03861617905550919392505050565b6005546001600160a01b0316331461032657600080fd5b6000828152602081815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251858152918201527fc117b81c381b8c8066e461527733c2f11b87ebf36631b006cb5a74e3c0388b1391015b60405180910390a15050565b6005546001600160a01b031633146103a257600080fd5b60008281526001602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251858152918201527f7db4106e64eb535cdc28ec9c40f88069b966623d027fb00f51344f67031f9b98910161037f565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661049d5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b80356001600160a01b038116811461049d57600080fd5b600082601f8301126104c9578081fd5b813567ffffffffffffffff808211156104e4576104e46106d8565b604051601f8301601f19908116603f0116810190828211818310171561050c5761050c6106d8565b81604052838152866020858801011115610524578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610551578081fd5b5035919050565b6000806040838503121561056a578081fd5b8235915061057a602084016104a2565b90509250929050565b600080600060608486031215610597578081fd5b833592506105a7602085016104a2565b91506105b5604085016104a2565b90509250925092565b600080600080600060a086880312156105d5578081fd5b8535945060208601359350604086013567ffffffffffffffff808211156105fa578283fd5b61060689838a016104b9565b9450606088013591508082111561061b578283fd5b50610628888289016104b9565b925050610637608087016104a2565b90509295509295909350565b60008151808452815b818110156106685760208185018101518683018201520161064c565b818111156106795782602083870101525b50601f01601f19169290920160200192915050565b6080815260006106a16080830187610643565b82810360208401526106b38187610643565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212205f5d3160a32a625db9bc06a480b36fd496fa77937e7a328f22eeb1c409f2a79464736f6c63430008040033";

type VaultFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultFactory__factory extends ContractFactory {
  constructor(...args: VaultFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "VaultFactory";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VaultFactory> {
    return super.deploy(overrides || {}) as Promise<VaultFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VaultFactory {
    return super.attach(address) as VaultFactory;
  }
  connect(signer: Signer): VaultFactory__factory {
    return super.connect(signer) as VaultFactory__factory;
  }
  static readonly contractName: "VaultFactory";
  public readonly contractName: "VaultFactory";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultFactoryInterface {
    return new utils.Interface(_abi) as VaultFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultFactory {
    return new Contract(address, _abi, signerOrProvider) as VaultFactory;
  }
}
