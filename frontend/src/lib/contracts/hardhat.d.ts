/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "DSTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSTest__factory>;
    getContractFactory(
      name: "BaseVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseVault__factory>;
    getContractFactory(
      name: "BasicMetaTransaction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicMetaTransaction__factory>;
    getContractFactory(
      name: "CharityVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CharityVault__factory>;
    getContractFactory(
      name: "DaoVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaoVault__factory>;
    getContractFactory(
      name: "DegenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DegenVault__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "IYearnVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYearnVault__factory>;
    getContractFactory(
      name: "AaveStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveStrategy__factory>;
    getContractFactory(
      name: "YearnStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnStrategy__factory>;
    getContractFactory(
      name: "CheatCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CheatCodes__factory>;
    getContractFactory(
      name: "ContractTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractTest__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockYearnVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockYearnVault__factory>;
    getContractFactory(
      name: "Strat",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strat__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "VaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultFactory__factory>;

    getContractAt(
      name: "DSTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSTest>;
    getContractAt(
      name: "BaseVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseVault>;
    getContractAt(
      name: "BasicMetaTransaction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicMetaTransaction>;
    getContractAt(
      name: "CharityVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CharityVault>;
    getContractAt(
      name: "DaoVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DaoVault>;
    getContractAt(
      name: "DegenVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DegenVault>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "IYearnVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYearnVault>;
    getContractAt(
      name: "AaveStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveStrategy>;
    getContractAt(
      name: "YearnStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnStrategy>;
    getContractAt(
      name: "CheatCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CheatCodes>;
    getContractAt(
      name: "ContractTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractTest>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockYearnVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockYearnVault>;
    getContractAt(
      name: "Strat",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Strat>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "VaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultFactory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
